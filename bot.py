#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç (aiogram 2.25.1 + SQLite)
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–æ–≤.

–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:
- –†–æ–ª–∏: guest ‚Üí manager ‚Üí admin (–≤ sessions)
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
- –ê–Ω–∫–µ—Ç–∞ –∑–∞—è–≤–∫–∏ (–∂—ë—Å—Ç–∫–∏–π –ø–æ—Ä—è–¥–æ–∫, –≤–æ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã —Ç–æ–ª—å–∫–æ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –∏ ¬´üö™ –í—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã¬ª)
- ¬´–ú–æ–∏ –∑–∞—è–≤–∫–∏¬ª —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –∫–∞—Ä—Ç–æ—á–∫–æ–π (–û—Ç–∫—Ä—ã—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å/–≠–∫—Å–ø–æ—Ä—Ç)
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π –∑–∞—è–≤–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏)
- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å–≤–æ–¥–∫–∞, —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫, —ç–∫—Å–ø–æ—Ä—Ç –æ–¥–Ω–æ–π/–≤—Å–µ—Ö
- JSON-—ç–∫—Å–ø–æ—Ä—Ç –Ω–∞ –¥–∏—Å–∫ (–∏ ZIP –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ç–æ–∫–µ–Ω —Å—Ç—Ä–æ–≥–æ –∏–∑ ENV/.env, –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–∑ ENV/.env, HTML escape, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
  pip install aiogram==2.25.1 python-dotenv==1.0.1

–ó–∞–ø—É—Å–∫:
  # .env:
  # TG_BOT_TOKEN=XXXXX
  # ADMIN_PASSWORD=changeme
  python bot.py

–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ Python 3.11.
"""

import os
import io
import json
import zipfile
import sqlite3
import logging
import html
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# =====================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =====================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("bot")

# =====================
# –ù–ê–°–¢–†–û–ô–ö–ò/ENV
# =====================
load_dotenv()  # —á–∏—Ç–∞–µ–º .env, –µ—Å–ª–∏ –µ—Å—Ç—å

BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("[!] TG_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "changeme")
DB_PATH = os.path.join(os.path.dirname(__file__), "bot.db")

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# =====================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
# =====================
def e(s: Any) -> str:
    """HTML-escape –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ parse_mode=HTML."""
    if s is None:
        return "‚Äî"
    return html.escape(str(s), quote=False)

def now_str() -> str:
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

def chunks(text: str, size: int = 3800) -> List[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è –∑–∞–ø–∞—Å –ø–æ–¥ —Ä–∞–∑–º–µ—Ç–∫—É/–∫–Ω–æ–ø–∫–∏."""
    if len(text) <= size:
        return [text]
    out, buf = [], []
    cur = 0
    while cur < len(text):
        out.append(text[cur:cur+size])
        cur += size
    return out

# =====================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =====================
def get_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn

def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER UNIQUE NOT NULL,
            first_name TEXT,
            last_name TEXT,
            age INTEGER,
            contact TEXT,
            created_at TEXT NOT NULL
        );
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS sessions (
            tg_id INTEGER PRIMARY KEY,
            mode TEXT NOT NULL DEFAULT 'guest', -- guest | manager | admin
            updated_at TEXT NOT NULL
        );
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            manager_id INTEGER NOT NULL,
            client_name TEXT,
            client_company TEXT,
            client_contact TEXT,
            status TEXT NOT NULL DEFAULT 'new',
            site_params_json TEXT NOT NULL,
            created_at TEXT NOT NULL,
            FOREIGN KEY(manager_id) REFERENCES users(id) ON DELETE CASCADE
        );
        """
    )
    cur.execute("CREATE INDEX IF NOT EXISTS idx_requests_manager_id ON requests(manager_id)")
    conn.commit()
    conn.close()

# =====================
# USERS / SESSIONS
# =====================
def get_user_by_tgid(tg_id: int) -> Optional[sqlite3.Row]:
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
    row = cur.fetchone()
    conn.close()
    return row

def get_user_by_id(uid: int) -> Optional[sqlite3.Row]:
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row

def create_user(tg_id: int, first_name: str, last_name: str, age: int, contact: str):
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        """
        INSERT INTO users (tg_id, first_name, last_name, age, contact, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
        """,
        (tg_id, first_name, last_name, age, contact, now_str())
    )
    conn.commit()
    conn.close()

def get_mode(tg_id: int) -> str:
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT mode FROM sessions WHERE tg_id=?", (tg_id,))
    row = cur.fetchone()
    conn.close()
    return (row[0] if row else "guest")

def set_mode(tg_id: int, mode: str):
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        """
        INSERT INTO sessions (tg_id, mode, updated_at)
        VALUES (?, ?, ?)
        ON CONFLICT(tg_id) DO UPDATE SET mode=excluded.mode, updated_at=excluded.updated_at
        """,
        (tg_id, mode, now_str()),
    )
    conn.commit()
    conn.close()

# =====================
# REQUESTS
# =====================
def list_manager_requests(manager_id: int, offset: int = 0, limit: int = 10) -> List[sqlite3.Row]:
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "SELECT id, client_name, status, created_at FROM requests WHERE manager_id = ? ORDER BY id DESC LIMIT ? OFFSET ?",
        (manager_id, limit, offset)
    )
    rows = cur.fetchall()
    conn.close()
    return rows

def count_manager_requests(manager_id: int) -> int:
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM requests WHERE manager_id = ?", (manager_id,))
    n = cur.fetchone()[0]
    conn.close()
    return n

def list_all_requests(offset: int = 0, limit: int = 20) -> List[sqlite3.Row]:
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "SELECT id, manager_id, client_name, status, created_at FROM requests ORDER BY id DESC LIMIT ? OFFSET ?",
        (limit, offset)
    )
    rows = cur.fetchall()
    conn.close()
    return rows

def count_all_requests() -> int:
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM requests")
    n = cur.fetchone()[0]
    conn.close()
    return n

def get_request(req_id: int) -> Optional[sqlite3.Row]:
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM requests WHERE id = ?", (req_id,))
    row = cur.fetchone()
    conn.close()
    return row

def create_request(manager_id: int, payload: Dict[str, Any]):
    client = payload.get("client", {})
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        """
        INSERT INTO requests (manager_id, client_name, client_company, client_contact, status, site_params_json, created_at)
        VALUES (?, ?, ?, ?, 'new', ?, ?)
        """,
        (
            manager_id,
            client.get("name"),
            client.get("company"),
            client.get("contact"),
            json.dumps(payload.get("site", {}), ensure_ascii=False),
            now_str(),
        )
    )
    conn.commit()
    conn.close()

def update_request_site_json(req_id: int, site_json: Dict[str, Any]):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("UPDATE requests SET site_params_json=? WHERE id=?", (json.dumps(site_json, ensure_ascii=False), req_id))
    conn.commit()
    conn.close()

def delete_request(req_id: int, manager_id: Optional[int] = None) -> bool:
    conn = get_db()
    cur = conn.cursor()
    if manager_id is None:
        cur.execute("DELETE FROM requests WHERE id=?", (req_id,))
    else:
        cur.execute("DELETE FROM requests WHERE id=? AND manager_id=?", (req_id, manager_id))
    deleted = cur.rowcount
    conn.commit()
    conn.close()
    return deleted > 0

# =====================
# FSM
# =====================
class RegForm(StatesGroup):
    first_name = State()
    last_name = State()
    age = State()
    contact = State()

class RequestForm(StatesGroup):
    client_name = State()
    client_company = State()
    client_contact = State()
    site_company = State()
    business_type = State()
    color_palette = State()
    site_contacts = State()
    short_desc = State()
    work_hours = State()
    structure = State()
    images = State()
    services = State()

class AdminLogin(StatesGroup):
    password = State()

class EditField(StatesGroup):
    waiting_value = State()

# =====================
# –ö–û–ú–ê–ù–î–´/–¢–ï–ö–°–¢–´
# =====================
GUEST_CMDS = [
    types.BotCommand("start", "–°—Ç–∞—Ä—Ç"),
    types.BotCommand("register", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    types.BotCommand("admin_login", "–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É"),
]

MANAGER_CMDS = [
    types.BotCommand("start", "–°—Ç–∞—Ä—Ç"),
    types.BotCommand("new_request", "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"),
    types.BotCommand("my_requests", "–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
    types.BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
    types.BotCommand("admin_login", "–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É"),
]

ADMIN_CMDS = [
    types.BotCommand("start", "–°—Ç–∞—Ä—Ç"),
    types.BotCommand("admin_panel", "–ê–¥–º–∏–Ω: –ø–∞–Ω–µ–ª—å"),
    types.BotCommand("admin_users", "–ê–¥–º–∏–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
    types.BotCommand("admin_requests", "–ê–¥–º–∏–Ω: –∑–∞—è–≤–∫–∏"),
    types.BotCommand("export_request", "–ê–¥–º–∏–Ω: —ç–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏"),
    types.BotCommand("export_all", "–ê–¥–º–∏–Ω: —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"),
    types.BotCommand("logout", "–ê–¥–º–∏–Ω: –≤—ã–π—Ç–∏"),
]

# –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
BTN_REG = "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
BTN_ADMIN_LOGIN = "üîê –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É"

BTN_NEW = "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
BTN_MY = "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"
BTN_RESET = "‚ùå –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã"

BTN_PANEL = "üìä –ü–∞–Ω–µ–ª—å"
BTN_USERS = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
BTN_REQS = "üì¶ –ó–∞—è–≤–∫–∏"
BTN_LOGOUT = "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"

# –ö–Ω–æ–ø–∫–∏ –∞–Ω–∫–µ—Ç—ã
BTN_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_EXIT = "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã"

# Callback –ø—Ä–µ—Ñ–∏–∫—Å—ã
CB_OPEN = "open_"            # open_<id>
CB_EDIT = "edit_"            # edit_<id>
CB_DELETE = "del_"           # del_<id>
CB_EDIT_FIELD = "ef_"        # ef_<id>_<field>
CB_BACK_TO_LIST = "back_list"
CB_LIST_PAGE = "plist_"      # plist_<page>
CB_EXPORT_ONE = "exp_"       # exp_<id>

EDITABLE_FIELDS = {
    "company": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
    "color_palette": "–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞",
    "site_contacts": "–ö–æ–Ω—Ç–∞–∫—Ç—ã/–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∞–π—Ç–∞",
    "short_desc": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "work_hours": "–†–∞–±–æ—á–∏–µ —á–∞—Å—ã",
    "structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    "images": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø–∏—Å–∞–Ω–∏–µ)",
    "services": "–£—Å–ª—É–≥–∏ (–ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ü–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ)",
}

# =====================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =====================
def guest_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_REG, BTN_ADMIN_LOGIN)
    return kb

def manager_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_NEW)
    kb.add(BTN_MY)
    kb.add(BTN_RESET, BTN_ADMIN_LOGIN)
    return kb

def admin_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_PANEL)
    kb.add(BTN_USERS, BTN_REQS)
    kb.add(BTN_LOGOUT)
    return kb

def form_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    kb.add(BTN_BACK, BTN_EXIT)
    return kb

def requests_list_inline(reqs: List[sqlite3.Row], page: int, total: int, per_page: int = 10) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardMarkup(row_width=1)
    for r in reqs:
        title = f"#{r['id']} ‚Äî {r['client_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}"
        ikb.add(InlineKeyboardButton(title, callback_data=f"{CB_OPEN}{r['id']}"))

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    pages = max(1, (total + per_page - 1) // per_page)
    nav_row = []
    if page > 1:
        nav_row.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"{CB_LIST_PAGE}{page-1}"))
    nav_row.append(InlineKeyboardButton(f"{page}/{pages}", callback_data=f"{CB_LIST_PAGE}{page}"))
    if page < pages:
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"{CB_LIST_PAGE}{page+1}"))
    if nav_row:
        ikb.row(*nav_row)
    return ikb

def request_card_inline(req_id: int, is_owner: bool, is_admin: bool) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardMarkup(row_width=2)
    if is_owner or is_admin:
        ikb.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{CB_EDIT}{req_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB_DELETE}{req_id}"),
        )
    ikb.add(InlineKeyboardButton("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç JSON", callback_data=f"{CB_EXPORT_ONE}{req_id}"))
    ikb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=CB_BACK_TO_LIST))
    return ikb

def edit_fields_inline(req_id: int) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardMarkup(row_width=2)
    btns = [
        InlineKeyboardButton(title, callback_data=f"{CB_EDIT_FIELD}{req_id}_{field}")
        for field, title in EDITABLE_FIELDS.items()
    ]
    for i in range(0, len(btns), 2):
        ikb.row(*btns[i:i+2])
    ikb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CB_OPEN}{req_id}"))
    return ikb

# =====================
# –ê–ù–ö–ï–¢–ê: –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞–∑–∞–¥
# =====================
PREV_STATE = {
    RequestForm.client_company: RequestForm.client_name,
    RequestForm.client_contact: RequestForm.client_company,
    RequestForm.site_company: RequestForm.client_contact,
    RequestForm.business_type: RequestForm.site_company,
    RequestForm.color_palette: RequestForm.business_type,
    RequestForm.site_contacts: RequestForm.color_palette,
    RequestForm.short_desc: RequestForm.site_contacts,
    RequestForm.work_hours: RequestForm.short_desc,
    RequestForm.structure: RequestForm.work_hours,
    RequestForm.images: RequestForm.structure,
    RequestForm.services: RequestForm.images,
}

async def prompt_for_state(state_name: State, message: types.Message):
    kb = form_kb()
    prompts = {
        RequestForm.client_name: "–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞</b>:",
        RequestForm.client_company: "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞</b>:",
        RequestForm.client_contact: "–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</b>:",
        RequestForm.site_company: "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–∞–π—Ç–∞</b>:",
        RequestForm.business_type: "–í–≤–µ–¥–∏—Ç–µ <b>—Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—É–¥–∏—è –º–∞–Ω–∏–∫—é—Ä–∞):",
        RequestForm.color_palette: "–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ</b>:",
        RequestForm.site_contacts: "–£–∫–∞–∂–∏—Ç–µ <b>–∫–æ–Ω—Ç–∞–∫—Ç—ã/–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∞–π—Ç–∞</b> (—Ç–µ–ª–µ—Ñ–æ–Ω, WhatsApp, Telegram, email –∏ —Ç.–¥.):",
        RequestForm.short_desc: "–í–≤–µ–¥–∏—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):",
        RequestForm.work_hours: "–í–≤–µ–¥–∏—Ç–µ <b>—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã</b> (—Ñ–æ—Ä–º–∞—Ç ¬´–ü–Ω‚Äì–ü—Ç 10:00‚Äì19:00¬ª):",
        RequestForm.structure: "–£–∫–∞–∂–∏—Ç–µ <b>—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞</b> (Hero, –û –Ω–∞—Å, –£—Å–ª—É–≥–∏, –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –û—Ç–∑—ã–≤—ã, FAQ, –ö–æ–Ω—Ç–∞–∫—Ç—ã, –ö–∞—Ä—Ç–∞):",
        RequestForm.images: "–û–ø–∏—à–∏—Ç–µ <b>–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ñ–æ—Ç–æ 1 ‚Äî –¥–ª—è Hero, —Ñ–æ—Ç–æ 2 ‚Äî –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ¬ª). –ó–∞–≥—Ä—É–∑–∫—É –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ:",
        RequestForm.services: "–í–≤–µ–¥–∏—Ç–µ <b>—É—Å–ª—É–≥–∏</b> (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ü–µ–Ω–∞):",
    }
    await message.answer(prompts[state_name], reply_markup=kb)

# =====================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥/–Ω–∞–∑–∞–¥
# =====================
@dp.message_handler(lambda m: m.text in {BTN_EXIT, "/reset", "/cancel", "–≤—ã–π—Ç–∏", "–æ—Ç–º–µ–Ω–∞"}, state="*")
async def cmd_exit_form(message: types.Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state is None:
        mode = get_mode(message.from_user.id)
        kb = admin_kb() if mode == "admin" else (manager_kb() if mode == "manager" else guest_kb())
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.", reply_markup=kb)
    await state.finish()
    set_mode(message.from_user.id, "manager")
    await message.answer("–ê–Ω–∫–µ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—ã –≤ —Ä–µ–∂–∏–º–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=manager_kb())

@dp.message_handler(lambda m: m.text in {BTN_BACK, "–Ω–∞–∑–∞–¥", "/back"}, state="*")
async def go_back(message: types.Message, state: FSMContext):
    cur = await state.get_state()
    if not cur or not cur.startswith(RequestForm.__name__):
        return await message.answer("–°–µ–π—á–∞—Å –Ω–µ –∏–¥—ë—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")
    cur_state_obj = None
    for s in RequestForm.states:
        if cur.endswith(s.state):
            cur_state_obj = s
            break
    if cur_state_obj and cur_state_obj in PREV_STATE:
        prev = PREV_STATE[cur_state_obj]
        await prev.set()
        await prompt_for_state(prev, message)
    else:
        await message.answer("–ù–∞–∑–∞–¥ –∏–¥—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ–∫—É–¥–∞.")

# =====================
# /start
# =====================
async def set_scope_cmds(chat_id: int, mode: str, is_registered: bool):
    if mode == "admin":
        await bot.set_my_commands(ADMIN_CMDS, scope=types.BotCommandScopeChat(chat_id))
    elif is_registered:
        await bot.set_my_commands(MANAGER_CMDS, scope=types.BotCommandScopeChat(chat_id))
    else:
        await bot.set_my_commands(GUEST_CMDS, scope=types.BotCommandScopeChat(chat_id))

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    init_db()
    user = get_user_by_tgid(message.from_user.id)
    is_reg = bool(user)
    mode = get_mode(message.from_user.id)
    if is_reg and mode != "admin":
        set_mode(message.from_user.id, "manager")
        mode = "manager"
    await set_scope_cmds(message.chat.id, mode, is_reg)
    if mode == "admin":
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–µ–∂–∏–º: <b>–ê–¥–º–∏–Ω</b>", reply_markup=admin_kb())
    elif is_reg:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–µ–∂–∏–º: <b>–ú–µ–Ω–µ–¥–∂–µ—Ä</b>", reply_markup=manager_kb())
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=guest_kb())

# =====================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
# =====================
@dp.message_handler(commands=["register"])
@dp.message_handler(lambda m: m.text == BTN_REG)
async def cmd_register(message: types.Message):
    if get_mode(message.from_user.id) == "admin":
        return await message.answer("–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏¬ª.", reply_markup=admin_kb())
    user = get_user_by_tgid(message.from_user.id)
    if user:
        set_mode(message.from_user.id, "manager")
        return await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=manager_kb())
    await RegForm.first_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:", reply_markup=guest_kb())

@dp.message_handler(state=RegForm.first_name)
async def reg_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await RegForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>:")

@dp.message_handler(state=RegForm.last_name)
async def reg_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await RegForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–æ–∑—Ä–∞—Å—Ç</b> (—á–∏—Å–ª–æ–º):")

@dp.message_handler(state=RegForm.age)
async def reg_age(message: types.Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit() or not (0 < int(txt) < 120):
        return await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 1‚Äì119. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    await state.update_data(age=int(txt))
    await RegForm.next()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>–∫–æ–Ω—Ç–∞–∫—Ç</b> (—Ç–µ–ª–µ—Ñ–æ–Ω/email/@username):")

@dp.message_handler(state=RegForm.contact)
async def reg_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        create_user(
            tg_id=message.from_user.id,
            first_name=data.get("first_name"),
            last_name=data.get("last_name"),
            age=data.get("age"),
            contact=message.text.strip(),
        )
        set_mode(message.from_user.id, "manager")
        await state.finish()
        await set_scope_cmds(message.chat.id, "manager", True)
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=manager_kb())
    except Exception:
        log.exception("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        await state.finish()
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /register.")

# =====================
# –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò
# =====================
@dp.message_handler(commands=["new_request"])
@dp.message_handler(lambda m: m.text == BTN_NEW)
async def cmd_new_request(message: types.Message):
    if get_mode(message.from_user.id) != "manager":
        return await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    user = get_user_by_tgid(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ¬´üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª.", reply_markup=guest_kb())
    await RequestForm.client_name.set()
    await prompt_for_state(RequestForm.client_name, message)

@dp.message_handler(state=RequestForm.client_name)
async def q_client_name(message: types.Message, state: FSMContext):
    await state.update_data(client_name=message.text.strip())
    await RequestForm.client_company.set()
    await prompt_for_state(RequestForm.client_company, message)

@dp.message_handler(state=RequestForm.client_company)
async def q_client_company(message: types.Message, state: FSMContext):
    await state.update_data(client_company=message.text.strip())
    await RequestForm.client_contact.set()
    await prompt_for_state(RequestForm.client_contact, message)

@dp.message_handler(state=RequestForm.client_contact)
async def q_client_contact(message: types.Message, state: FSMContext):
    await state.update_data(client_contact=message.text.strip())
    await RequestForm.site_company.set()
    await prompt_for_state(RequestForm.site_company, message)

@dp.message_handler(state=RequestForm.site_company)
async def q_site_company(message: types.Message, state: FSMContext):
    await state.update_data(site_company=message.text.strip())
    await RequestForm.business_type.set()
    await prompt_for_state(RequestForm.business_type, message)

@dp.message_handler(state=RequestForm.business_type)
async def q_business_type(message: types.Message, state: FSMContext):
    await state.update_data(business_type=message.text.strip())
    await RequestForm.color_palette.set()
    await prompt_for_state(RequestForm.color_palette, message)

@dp.message_handler(state=RequestForm.color_palette)
async def q_color_palette(message: types.Message, state: FSMContext):
    await state.update_data(color_palette=message.text.strip())
    await RequestForm.site_contacts.set()
    await prompt_for_state(RequestForm.site_contacts, message)

@dp.message_handler(state=RequestForm.site_contacts)
async def q_site_contacts(message: types.Message, state: FSMContext):
    await state.update_data(site_contacts=message.text.strip())
    await RequestForm.short_desc.set()
    await prompt_for_state(RequestForm.short_desc, message)

@dp.message_handler(state=RequestForm.short_desc)
async def q_short_desc(message: types.Message, state: FSMContext):
    await state.update_data(short_desc=message.text.strip())
    await RequestForm.work_hours.set()
    await prompt_for_state(RequestForm.work_hours, message)

@dp.message_handler(state=RequestForm.work_hours)
async def q_work_hours(message: types.Message, state: FSMContext):
    await state.update_data(work_hours=message.text.strip())
    await RequestForm.structure.set()
    await prompt_for_state(RequestForm.structure, message)

@dp.message_handler(state=RequestForm.structure)
async def q_structure(message: types.Message, state: FSMContext):
    await state.update_data(structure=message.text.strip())
    await RequestForm.images.set()
    await prompt_for_state(RequestForm.images, message)

@dp.message_handler(state=RequestForm.images)
async def q_images(message: types.Message, state: FSMContext):
    await state.update_data(images=message.text.strip())
    await RequestForm.services.set()
    await prompt_for_state(RequestForm.services, message)

def parse_services(text: str) -> List[Dict[str, str]]:
    services = []
    for line in (text or "").splitlines():
        norm = line.replace("|", "‚Äî").replace(" - ", " ‚Äî ").replace("-", "‚Äî")
        parts = [p.strip() for p in norm.split("‚Äî") if p.strip()]
        if not parts:
            continue
        item = {"name": parts[0]}
        if len(parts) > 1:
            item["desc"] = parts[1]
        if len(parts) > 2:
            item["price"] = parts[2]
        services.append(item)
    return services

@dp.message_handler(state=RequestForm.services)
async def q_services(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = get_user_by_tgid(message.from_user.id)

    payload = {
        "client": {
            "name": data.get("client_name"),
            "company": data.get("client_company"),
            "contact": data.get("client_contact"),
        },
        "site": {
            "company": data.get("site_company"),
            "business_type": data.get("business_type"),
            "color_palette": data.get("color_palette"),
            "site_contacts": data.get("site_contacts"),
            "short_desc": data.get("short_desc"),
            "work_hours": data.get("work_hours"),
            "structure": [s.strip() for s in (data.get("structure") or "").replace(";", ",").split(",") if s.strip()],
            "images": data.get("images"),
            "services": parse_services(message.text or ""),
        }
    }

    try:
        create_request(manager_id=user["id"], payload=payload)
        await state.finish()
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–û—Ç–∫—Ä–æ–π—Ç–µ ¬´üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=manager_kb())
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
        await state.finish()
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=manager_kb())

# =====================
# –ú–û–ò –ó–ê–Ø–í–ö–ò (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
# =====================
def format_request_card(rec: sqlite3.Row, show_private: bool = True) -> str:
    site: Dict[str, Any] = json.loads(rec["site_params_json"] or "{}")
    services = site.get("services") or []
    services_txt = "\n".join(
        [f"‚Ä¢ {e(s.get('name',''))}" + (f" ‚Äî {e(s.get('desc',''))}" if s.get('desc') else "") + (f" ‚Äî {e(s.get('price',''))}" if s.get('price') else "")
         for s in services]
    ) or "‚Äî"
    structure_txt = ", ".join([e(s) for s in (site.get("structure") or [])]) or "‚Äî"

    client_block = (
        f"–ö–ª–∏–µ–Ω—Ç: <b>{e(rec['client_name'])}</b>\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e(rec['client_company'])}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: {e(rec['client_contact'])}\n\n"
    ) if show_private else ""

    return (
        f"<b>–ó–∞—è–≤–∫–∞ #{rec['id']}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: <i>{e(rec['status'])}</i>\n"
        f"{client_block}"
        f"<b>–î–ª—è —Å–∞–π—Ç–∞</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {e(site.get('company'))}\n"
        f"–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: {e(site.get('business_type'))}\n"
        f"–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞: {e(site.get('color_palette'))}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã/–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∞–π—Ç–∞: {e(site.get('site_contacts'))}\n"
        f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {e(site.get('short_desc'))}\n"
        f"–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {e(site.get('work_hours'))}\n"
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_txt}\n"
        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e(site.get('images'))}\n"
        f"–£—Å–ª—É–≥–∏:\n{services_txt}"
    )

@dp.message_handler(commands=["my_requests"])
@dp.message_handler(lambda m: m.text == BTN_MY)
async def cmd_my_requests(message: types.Message, state: FSMContext):
    if get_mode(message.from_user.id) != "manager":
        return await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    user = get_user_by_tgid(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ¬´üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª.", reply_markup=guest_kb())

    total = count_manager_requests(user["id"])
    if total == 0:
        return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.", reply_markup=manager_kb())

    page = 1
    per_page = 10
    rows = list_manager_requests(user["id"], offset=(page-1)*per_page, limit=per_page)
    await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫:", reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=requests_list_inline(rows, page, total, per_page))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(CB_LIST_PAGE))
async def cb_list_page(call: types.CallbackQuery):
    user = get_user_by_tgid(call.from_user.id)
    if not user:
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    try:
        page = int(call.data[len(CB_LIST_PAGE):])
    except ValueError:
        page = 1
    per_page = 10
    total = count_manager_requests(user["id"])
    pages = max(1, (total + per_page - 1) // per_page)
    page = min(max(1, page), pages)
    rows = list_manager_requests(user["id"], offset=(page-1)*per_page, limit=per_page)
    await call.message.edit_reply_markup(requests_list_inline(rows, page, total, per_page))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(CB_OPEN))
async def cb_open_request(call: types.CallbackQuery):
    req_id = int(call.data[len(CB_OPEN):])
    rec = get_request(req_id)
    if not rec:
        return await call.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    user = get_user_by_tgid(call.from_user.id)
    is_owner = bool(user and rec["manager_id"] == user["id"])
    is_admin = get_mode(call.from_user.id) == "admin"
    show_private = is_owner or is_admin
    txt = format_request_card(rec, show_private=show_private)
    await call.message.edit_text(txt, reply_markup=request_card_inline(req_id, is_owner, is_admin))

@dp.callback_query_handler(lambda c: c.data and c.data == CB_BACK_TO_LIST)
async def cb_back_list(call: types.CallbackQuery):
    user = get_user_by_tgid(call.from_user.id)
    if not user:
        return await call.message.edit_text("–ù–µ—Ç –ø—Ä–∞–≤.")
    total = count_manager_requests(user["id"])
    if total == 0:
        return await call.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    page = 1
    per_page = 10
    rows = list_manager_requests(user["id"], offset=0, limit=per_page)
    await call.message.edit_text("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫:", reply_markup=requests_list_inline(rows, page, total, per_page))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(CB_DELETE))
async def cb_delete_request(call: types.CallbackQuery, state: FSMContext):
    req_id = int(call.data[len(CB_DELETE):])
    user = get_user_by_tgid(call.from_user.id)
    if not user:
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    if delete_request(req_id, manager_id=user["id"]) or get_mode(call.from_user.id) == "admin" and delete_request(req_id):
        await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{req_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤).", show_alert=True)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(CB_EDIT))
async def cb_edit_request(call: types.CallbackQuery):
    req_id = int(call.data[len(CB_EDIT):])
    rec = get_request(req_id)
    if not rec:
        return await call.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    user = get_user_by_tgid(call.from_user.id)
    is_admin = get_mode(call.from_user.id) == "admin"
    if not (is_admin or (user and rec["manager_id"] == user["id"])):
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", show_alert=True)
    await call.message.edit_text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{req_id}: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –Ω–∏–∂–µ.", reply_markup=edit_fields_inline(req_id))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(CB_EDIT_FIELD))
async def cb_edit_field(call: types.CallbackQuery, state: FSMContext):
    payload = call.data[len(CB_EDIT_FIELD):]  # <id>_<field>
    req_id_str, field = payload.split("_", 1)
    req_id = int(req_id_str)
    rec = get_request(req_id)
    if not rec:
        return await call.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    user = get_user_by_tgid(call.from_user.id)
    is_admin = get_mode(call.from_user.id) == "admin"
    if not (is_admin or (user and rec["manager_id"] == user["id"])):
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", show_alert=True)

    title = EDITABLE_FIELDS.get(field, field)
    await state.update_data(edit_req_id=req_id, edit_field=field)
    await EditField.waiting_value.set()
    await call.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: <b>{e(title)}</b>\n\n"
        f"–ï—Å–ª–∏ ¬´–°—Ç—Ä—É–∫—Ç—É—Ä–∞¬ª ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Å–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        f"–ï—Å–ª–∏ ¬´–£—Å–ª—É–≥–∏¬ª ‚Äî –∫–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ü–µ–Ω–∞."
    )

@dp.message_handler(state=EditField.waiting_value)
async def on_edit_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    req_id = int(data.get("edit_req_id"))
    field = data.get("edit_field")
    rec = get_request(req_id)
    if not rec:
        await state.finish()
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=manager_kb())

    user = get_user_by_tgid(message.from_user.id)
    is_admin = get_mode(message.from_user.id) == "admin"
    if not (is_admin or (user and rec["manager_id"] == user["id"])):
        await state.finish()
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", reply_markup=manager_kb())

    site = json.loads(rec["site_params_json"] or "{}")
    value = (message.text or "").strip()

    if field == "structure":
        site["structure"] = [s.strip() for s in value.replace(";", ",").split(",") if s.strip()]
    elif field == "services":
        site["services"] = parse_services(value)
    else:
        site[field] = value

    update_request_site_json(req_id, site)
    await state.finish()
    await message.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=manager_kb())

# =====================
# –≠–ö–°–ü–û–†–¢ (inline, –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞/–∞–¥–º–∏–Ω–∞)
# =====================
def build_request_payload(rec: sqlite3.Row) -> Dict[str, Any]:
    return {
        "request_id": rec["id"],
        "manager_id": rec["manager_id"],
        "client": {
            "name": rec["client_name"],
            "company": rec["client_company"],
            "contact": rec["client_contact"],
        },
        "site": json.loads(rec["site_params_json"] or "{}"),
        "status": rec["status"],
        "created_at": rec["created_at"],
    }

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(CB_EXPORT_ONE))
async def cb_export_one(call: types.CallbackQuery):
    req_id = int(call.data[len(CB_EXPORT_ONE):])
    rec = get_request(req_id)
    if not rec:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    user = get_user_by_tgid(call.from_user.id)
    is_admin = get_mode(call.from_user.id) == "admin"
    if not (is_admin or (user and rec["manager_id"] == user["id"])):
        return await call.answer("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.", show_alert=True)

    payload = build_request_payload(rec)
    json_str = json.dumps(payload, ensure_ascii=False, indent=2)

    fname = f"request_{req_id}.json"
    with open(fname, "w", encoding="utf-8") as f:
        f.write(json_str)

    await call.message.answer_document(types.InputFile(fname), caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏ #{req_id} (JSON)")

# =====================
# –ê–î–ú–ò–ù–ö–ê
# =====================
def require_admin(handler):
    async def wrapper(message: types.Message, *args, **kwargs):
        if get_mode(message.from_user.id) != "admin":
            return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω.")
        return await handler(message, *args, **kwargs)
    return wrapper

@dp.message_handler(commands=["admin_login"])
@dp.message_handler(lambda m: m.text == BTN_ADMIN_LOGIN)
async def cmd_admin_login(message: types.Message, state: FSMContext):
    if get_mode(message.from_user.id) == "admin":
        return await message.answer("–í—ã —É–∂–µ –≤ –∞–¥–º–∏–Ω–∫–µ.", reply_markup=admin_kb())
    await AdminLogin.password.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

@dp.message_handler(state=AdminLogin.password)
async def admin_check_pass(message: types.Message, state: FSMContext):
    if message.text.strip() != ADMIN_PASSWORD:
        await state.finish()
        return await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π.")
    set_mode(message.from_user.id, "admin")
    await state.finish()
    await set_scope_cmds(message.chat.id, "admin", True)
    await message.answer("–ì–æ—Ç–æ–≤–æ. –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –≤–∫–ª—é—á—ë–Ω.", reply_markup=admin_kb())

@dp.message_handler(commands=["logout"])
@dp.message_handler(lambda m: m.text == BTN_LOGOUT)
async def cmd_logout(message: types.Message):
    if get_mode(message.from_user.id) != "admin":
        return await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞.")
    set_mode(message.from_user.id, "manager")
    await set_scope_cmds(message.chat.id, "manager", True)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏. –í–µ—Ä–Ω—É–ª—Å—è —Ä–µ–∂–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=manager_kb())

@dp.message_handler(commands=["admin_panel"])
@dp.message_handler(lambda m: m.text == BTN_PANEL)
@require_admin
async def cmd_admin_panel(message: types.Message):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users"); users_count = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM requests"); reqs_count = cur.fetchone()[0]
    conn.close()
    await message.answer(
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"–ó–∞—è–≤–æ–∫: <b>{reqs_count}</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ üì¶ –ó–∞—è–≤–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ /export_request <id> ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏ –≤ JSON\n"
        "‚Ä¢ /export_all ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (ZIP)\n"
        "‚Ä¢ üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"
    )

@dp.message_handler(commands=["admin_users"])
@dp.message_handler(lambda m: m.text == BTN_USERS)
@require_admin
async def cmd_admin_users(message: types.Message):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, first_name, last_name, age, contact, created_at, tg_id FROM users ORDER BY id DESC")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    lines = []
    for u in rows:
        name = f"{u['first_name'] or ''} {u['last_name'] or ''}".strip() or "‚Äî"
        lines.append(
            f"#{u['id']}: <b>{e(name)}</b> | {e(u['contact'])} | –≤–æ–∑—Ä–∞—Å—Ç: {e(u['age'])} | tg_id: {e(u['tg_id'])} | {e(u['created_at'])}"
        )
    text = "\n".join(lines)
    for part in chunks(text):
        await message.answer(part)

@dp.message_handler(commands=["admin_requests"])
@dp.message_handler(lambda m: m.text == BTN_REQS)
@require_admin
async def cmd_admin_requests(message: types.Message):
    total = count_all_requests()
    if total == 0:
        return await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    rows = list_all_requests(0, 20)
    lines = []
    for r in rows:
        mgr = get_user_by_id(r["manager_id"])
        mgr_name = (f"{mgr['first_name'] or ''} {mgr['last_name'] or ''}".strip()) if mgr else "?"
        lines.append(
            f"#{r['id']}: <b>{e(r['client_name'])}</b> | –º–µ–Ω–µ–¥–∂–µ—Ä: {e(mgr_name)} | {e(r['status'])} | {e(r['created_at'])}"
        )
    text = "\n".join(lines)
    for part in chunks(text):
        await message.answer(part)

@dp.message_handler(commands=["export_request"])
@require_admin
async def cmd_export_request(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export_request <id>")
    req_id = int(parts[1])
    rec = get_request(req_id)
    if not rec:
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    payload = build_request_payload(rec)
    json_str = json.dumps(payload, ensure_ascii=False, indent=2)
    fname = f"request_{req_id}.json"
    with open(fname, "w", encoding="utf-8") as f:
        f.write(json_str)
    await message.answer_document(types.InputFile(fname), caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏ #{req_id}")

@dp.message_handler(commands=["export_all"])
@require_admin
async def cmd_export_all(message: types.Message):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM requests ORDER BY id DESC")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        return await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º ZIP –≤ –ø–∞–º—è—Ç–∏
    bio = io.BytesIO()
    with zipfile.ZipFile(bio, mode="w", compression=zipfile.ZIP_DEFLATED) as zf:
        for r in rows:
            payload = build_request_payload(r)
            data = json.dumps(payload, ensure_ascii=False, indent=2)
            zf.writestr(f"request_{r['id']}.json", data)
    bio.seek(0)
    await message.answer_document(types.InputFile(bio, filename="requests_export.zip"), caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (ZIP)")

# =====================
# on_startup
# =====================
async def on_startup(dp):
    init_db()
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç –Ω–∞ /start –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ
    await bot.set_my_commands(GUEST_CMDS)
    log.info("Bot is running‚Ä¶")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
